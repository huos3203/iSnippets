snippet hexo "博客简介" i
---
title: `!p snip.rv = snip.fn.split('.')[0]`
date: `!v strftime("%Y-%m-%d %H:%M:%S%z")` 
updated: `!v strftime("%Y-%m-%d %H:%M:%S%z")`
comments: true
layout: post
tags: []
categories: iOS
password: 1234
copyright: true
---


\`\`\`puml
scale 2
page 2x1
title 
`!p snip.rv = snip.fn.split('.')[0]`
创建时间：`!v strftime("%Y-%m-%d %H:%M:%S%z")` 
endtitle
left header
$2
endheader
\`\`\`

endsnippet

##plantuml
snippet uml
\`\`\`puml
scale 2
page 1x1
title
${1:}
创建时间：`!v strftime("%Y-%m-%d %H:%M:%S%z")` 
endtitle
left header
$2
endheader
\`\`\`
endsnippet

## 类
snippet class "类声明" i
class "$1" as $0 {
	--属性组 --
	${2:+} var $3:${4:String}=${5:""}	
	__ 函数组__
	${6:+} func $7($7:$8,$9:$10)
}
endsnippet

### 抽象类
snippet gii "创建接口"
interface "$1" as $0{
	__ 函数组__
	${6:+} func $7($7:$8,$9:$10)

}
endsnippet
snippet gabs "抽象类"
abstract "$1" as $0 {
    --属性组 --
	${2:+} var $3:${4:String}=${5:""}	
	__ 函数组__
	${6:+} func $7($7:$8,$9:$10)
}
endsnippet

snippet genu "枚举"
enum "$1" as $0 {
}
endsnippet
	

snippet note "备注" i
note left of $1
	$2 
end note
endsnippet
	
##relationship
snippet bbt "接口协议：棒棒糖表示法" b
${1:讲话} o-- ${2:唐老鸭}
endsnippet
snippet jc "继承"
${1:基类} <|-- ${2:子类}:继承<
endsnippet
snippet sx "实现接口"
${1:接口} <|.. ${2:实现}:实现接口<
endsnippet
snippet hc "合成：强拥有关系鸟*-->翅膀"
${1:翅} *--> ${2:鸟}:合成<
endsnippet 
snippet jh "聚合：弱拥有，雁群o-->大雁"
${1:雁群} o--> ${2:大雁}:聚合<
endsnippet
snippet gl "关联：气候<--企鹅"
${1:气候} <-- ${2:企鹅}:关联<
endsnippet 
snippet yl "依赖：氧气<..动物"
${1:动物} ..> ${2:水}:依赖<
endsnippet

##甘特图
snippet gg "创建新项目" b
project starts `!v strftime("%Y-%m-%d")` 
Sunday are closed
Saturday are closed
--组名--
[$1] as [$2] on \{${3:hsg:100%}\} lasts ${4:1} days
endsnippet
snippet gtask "创建新任务" b
[$1] as [$2] on \{${3:hsg:100%}\} lasts ${4:1} days
endsnippet
snippet gthen "创建then关联任务"
then [$1] on \{${2:hsg:100%}\} lasts ${3:1} days
endsnippet

snippet gwho "on分配到who"
 on \{${2:hsg:100%}\} 
endsnippet

snippet gend "创建串行任务"
[$1] starts at [$2]'s end
endsnippet
snippet gstart "创建并行任务"
[$1] starts at [$2]'s start
endsnippet


snippet gmile "创建里程碑" b
[$1] happens at [$2]'s end
endsnippet
snippet glink "安排任务顺序" b
[$1] -> [$2]
endsnippet


## 用例
snippet guc "创建用例" b
($1) as $2
endsnippet
snippet gac "角色" b
:$1: as $2
endsnippet
snippet gucd "支持描述的用例"
usecase $1 as "
==**$2**==
$3
--基础操作流程--
$4
..可选操作流程..
$5
"
endsnippet
	
###用例关系
snippet gul "连接用例和角色"
$1 --> $2:$3
endsnippet

## 活动图
snippet gh "创建活动图" b
start
:$1;

stop
endsnippet
snippet gif "条件分支" b
if (${1:条件}) then (YES)
	:${2:活动};
elseif($3)
	:$4;
else(NO)
	:$6;
endif
endsnippet
snippet gfork "并发分支" b
fork
:$1;
fork again
:$2; 
end fork
endsnippet
snippet grepeat "循环分支" b
repeat
:$1;
repeat while(${2:条件})
endsnippet
snippet gwhile "循环活动" b
while (${1:条件}) is ($2)
:$3;
endwhile
endsnippet
snippet gsw "使用管道符`|`定义创建泳道" b
|#${0:color}|${1:name}|
endsnippet

## 时序图
snippet gsx "创建时序图" b
autonumber ${0:0}
'actor,boundary,control,entity,database
${2:actor} $3 as $4
endsnippet
snippet gss "创建参与者" b
actor $1 as $2
endsnippet
snippet gsa "激活参与者" b
activate $1
$2
deactivate $1
endsnippet
snippet gs= "分割线"
===$0==
endsnippet 
snippet gsm> "普通消息细尖头"
$1 -[#${3:black}]>> $2:$4
endsnippet
snippet gsm "同步发送消息" b
$1 -[#${3:black}]> $2:$4
endsnippet
snippet gsmm "返回消息，可选"
$1 --[#${3:black}]> $2:$4
endsnippet	
snippet gsx "丢失的消息" b
$1 ->x $2:$3
endsnippet
snippet gso "箭头加圈" b
$1 ->o $2:$3
endsnippet
snippet gs/ "异步消息" b
$1 -/ $2:$3
endsnippet

##脑图
snippet xmind "支持脑图"
\`\`\`puml
@startmindmap
caption ${1:说明文字}
title ${2:标头}
center header
${3:头部描述}
endheader
* root node
	* child node
	*_ child2 node
left side
	* child left node
	*_ child2 left node

legend right
${5:图例}
endlegend

center footer
${4:页眉描述}
endfooter
@endmindmap
\`\`\`

endsnippet
	
	
#common
snippet lr
	left to right direction
endsnippet
snippet tb
	top to bottom direction
endsnippet

#文本样式
snippet -- "删除线"
--$0--
endsnippet

snippet __ "下划线"
__$0__
endsnippet

snippet ~~ "波浪线"
~~$0~~
endsnippet

snippet // "斜体"
//$0//
endsnippet

snippet xb "下标体"
"" ${VISUAL} ""
endsnippet

## 组件
snippet gcom "组件"
[$1] as $2
endsnippet

snippet ginter "接口"
() "$1" as $2
endsnippet

	
	

## 通用图
snippet gfold "分组"
'package，node，folder，frame，cloud，database'
package "$1" as $2{
}
endsnippet 
	
	

	



